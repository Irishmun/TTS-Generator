<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAEACAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAQAAAgEAAAIBAgACAgIAAgMCAALCwsAEAwQABAQEAAQFBAAGBgYABgcGAAgHCAAHR8dACAg
        IAAgISAAIyEjACAkIAAlJSAAJSUjACMnIwAlKCUAKCglACUpJQAoKCgAKCwoAC0sLQArLSsAMDAoADMz
        MwA1NTAAODU1ADg4MAA4PDgAOzs7ADs8OwA7PTsAQD1AADs/OwA9Pz0AQEA9AEBAQABAREAAQ0RDAEhI
        QABFSUUAS0tLAFBMSABLTEsASExQAE1NTQBNT0gAS09LAFBQSABNT00AS1BLAFBQSwBQUVAAUFRQAFhU
        UABTVFMAU1VQAFVVVQBVV1AAU1dTAFhXUwBVV1UAVVhVAFhXWABYWFgAWFlVAFhbVQBYXFgAXVxYAGBc
        WABbXVsAXV1dAGBfWwBdYFsAXWBdAGBfYABgYVsAYGFgAGBkWABgZGAAY2RgAGNlYABjZWMAZWVlAGhn
        YwBoaGAAaGlgAGhpYwBlaWUAaGloAGtsZQBobGgAbW9oAHBwaABzcG0AbXBwAG1xbQBwcHAAcHRwAHB4
        cAB4eHAAeHhzAHh4eAB1e3UAe3x1AHh8eAB7fHsAe314AH1/eAB7f3sAgIB4AH1/fQCAgIAAgIGAAICE
        gACDg4MAhYWAAIiIgACFiIUAiIiFAIWJhQCIjIgAi4+LAJCQiACLkIsAjZCNAJCTkACQlJAAk5OTAJOU
        kACVlJMAmJSYAJiYkACVmJUAlZmVAJiYmACYnJAAmJyYAJubmwCbn5sAnaCbAKCgmwCdoZ0AnaOdAKCj
        oACjo6AAoKSgAKOkowClpaAAo6WjAKCooACoqKAApailAKWppQCoqKgAqKmoAKirqACorKgAq62rAK2v
        qACwsKgAsLGrALCwsACwsbAArbOtALO0rQCwtLAAsLiwALO3swC4uLAAtbi1ALO5swC4uLgAuLm4ALi7
        tQC7u7gAuLy4ALjAuADAwLgAvb+9AMDAwADAxMAAw8TDAMPFwADAyMAAyMjAAMXJxQDFzMUAyMzIAM3P
        yADI0MgAy8/LAM3RzQDQ0NAA0NTQANXZ1QDY2NgA2NvYANjc2ADb3dgA29/bANvg2wDd4d0A4ODgAODk
        4ADg6OAA4+fjAOjo6ADo6egA6OzoAOjv6ADr7+sA7fHtAPDz8ADw9PAA8PXwAPP18wDw+PAA+Pj4APj8
        +AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQoezAICAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEpbq6
        MAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQE
        aqW6uroIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAoEKKWlurq6ewAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAADgAHHCXl7fCzMIBAQAAAAAAAAAAAAAAAAB1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////8P/////////gf////////4A//
        ///////AB////////4AH////////AAP///////4AA//v/////AAB//f////4AAH/+/////AAAf/5////
        4AAA//z////AAAD5/P///4AAAPn8f///AAAA/P5///4AAAB8/j///AAAAH5/P//4AAAAfn8///AAAAB+
        Pz//4AAAAH8/H/AAAAAAfz+f4AAAAAB/P5/AAAAAAH8fn4AAAAAAf5+fAAAAAAA/n48AAAAAAD+fzwAA
        AAAAP5/PAAAAAAA/n88AAAAAAD+fzwAAAAAAP5/PAAAAAAA/n88AAAAAAD+fzwAAAAAAP5/PAAAAAAA/
        n88AAAAAAD+fzwAAAAAAP5/PAAAAAAA/n48AAAAAAH8fn4AAAAAAfz+fwAAAAAB/P5/gAAAAAH8/n/AA
        AAAAfj8f/+AAAAB+fz//8AAAAH5/P//4AAAAfH8///wAAAD8/j///gAAAPn+f///AAAA+/x///+AAADz
        /P///8AAAef8////4AAB7/n////wAAH/+/////gAA//z/////AAD/+f////+AAP/7/////8AB//f////
        /4AH////////wA/////////gH/////////g/////////////////////////////////////
</value>
  </data>
</root>